# Docker Swarm Stack Configuration for MCP Python SDK
# High-performance configuration with GPU passthrough and resource optimization
# Uses global configuration variables with GLOBAL_ prefix

services:
  mcp-python-sdk:
    image: ${DEV_CONTAINER_NAME:-mcp-python-sdk-dev}:latest
    deploy:
      replicas: ${SWARM_REPLICAS:-1}
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${GLOBAL_CPU_RESERVATION:-4}"
          memory: "${GLOBAL_MEMORY_RESERVATION:-8G}"
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - NVIDIA_VISIBLE_DEVICES=${GLOBAL_NVIDIA_VISIBLE_DEVICES:-all}
      - NVIDIA_DRIVER_CAPABILITIES=${GLOBAL_NVIDIA_DRIVER_CAPABILITIES:-all}
      - CUDA_VISIBLE_DEVICES=${GLOBAL_CUDA_VISIBLE_DEVICES:-all}
      - PYTHONPATH=${GLOBAL_PYTHONPATH:-/workspaces/python-sdk/src}
      - NUMBA_CACHE_DIR=${GLOBAL_NUMBA_CACHE_DIR:-/opt/mcp-cache/numba}
    volumes:
      - mcp-cache-volume:/opt/mcp-cache
      - python-cache-volume:/opt/mcp-cache/python
      - pip-cache-volume:/opt/mcp-cache/pip
      - numba-cache-volume:/opt/mcp-cache/numba
      - cuda-cache-volume:/opt/mcp-cache/cuda
      - rust-cache-volume:/opt/mcp-cache/rust
    networks:
      - mcp-network

  postgres:
    image: postgres:16-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - POSTGRES_USER=${GLOBAL_POSTGRES_USER:-postgres}
      - POSTGRES_DB=${GLOBAL_POSTGRES_DB:-postgres}
      - POSTGRES_PASSWORD=${GLOBAL_POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - mcp-network

  traefik:
    image: traefik:v3.0
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: overlay
    attachable: true

volumes:
  mcp-cache-volume:
    driver: local
  python-cache-volume:
    driver: local
  pip-cache-volume:
    driver: local
  numba-cache-volume:
    driver: local
  cuda-cache-volume:
    driver: local
  rust-cache-volume:
    driver: local
  postgres-data:
    driver: local