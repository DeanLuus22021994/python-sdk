# Docker Swarm Stack Configuration for MCP Python SDK
# Simplified modular configuration with service composition
# Uses global configuration variables with GLOBAL_ prefix

services:
  mcp-app:
    image: ${DEV_CONTAINER_NAME:-mcp-python-sdk-dev}:latest
    deploy:
      replicas: ${SWARM_REPLICAS:-1}
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "${GLOBAL_CPU_RESERVATION:-4}"
          memory: "${GLOBAL_MEMORY_RESERVATION:-8G}"
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - DATABASE_URL=postgresql://${GLOBAL_POSTGRES_USER:-postgres}:${GLOBAL_POSTGRES_PASSWORD:-postgres}@postgres:${GLOBAL_POSTGRES_PORT:-5432}/${GLOBAL_POSTGRES_DB:-postgres}
      - REDIS_URL=redis://redis:${GLOBAL_REDIS_PORT:-6379}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-5000}
      - NVIDIA_VISIBLE_DEVICES=${GLOBAL_NVIDIA_VISIBLE_DEVICES:-all}
      - NVIDIA_DRIVER_CAPABILITIES=${GLOBAL_NVIDIA_DRIVER_CAPABILITIES:-all}
      - CUDA_VISIBLE_DEVICES=${GLOBAL_CUDA_VISIBLE_DEVICES:-all}
    ports:
      - "${MCP_SERVER_PORT:-5000}:5000"
      - "${FASTAPI_PORT:-8000}:8000"
    volumes:
      - mcp-cache-volume:/opt/mcp-cache
      - python-cache-volume:/opt/mcp-cache/python
      - pip-cache-volume:/opt/mcp-cache/pip
    tmpfs:
      - /tmp:size=${GLOBAL_TMPFS_SIZE:-32G},mode=1777
    shm_size: ${GLOBAL_CONTAINER_SHM_SIZE:-16G}
    privileged: ${GLOBAL_PRIVILEGED_MODE:-true}
    networks:
      - mcp-network

  postgres:
    image: postgres:16-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - POSTGRES_USER=${GLOBAL_POSTGRES_USER:-postgres}
      - POSTGRES_DB=${GLOBAL_POSTGRES_DB:-postgres}
      - POSTGRES_PASSWORD=${GLOBAL_POSTGRES_PASSWORD:-postgres}
    ports:
      - "${GLOBAL_POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: '1'
          memory: 2G
    command: >
      redis-server
      --maxmemory ${GLOBAL_REDIS_MAXMEMORY:-4gb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    ports:
      - "${GLOBAL_REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: overlay
    attachable: true

volumes:
  mcp-cache-volume:
    driver: local
  python-cache-volume:
    driver: local
  pip-cache-volume:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local