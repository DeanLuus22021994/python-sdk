# Redis Service - High Performance Configuration  
# Optimized for in-memory operations and caching
# Uses global configuration from ../../config/docker-globals.env

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    
    # Load global configuration
    env_file:
      - ../../config/docker-globals.env
    
    # High-performance Redis configuration
    command: >
      redis-server
      --maxmemory ${GLOBAL_REDIS_MAXMEMORY:-4gb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --tcp-keepalive 60
      --tcp-backlog 511
      --databases 16
      --timeout 0
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error no
      --maxclients 10000
      --hash-max-ziplist-entries 512
      --hash-max-ziplist-value 64
      --list-max-ziplist-size -2
      --list-compress-depth 0
      --set-max-intset-entries 512
      --zset-max-ziplist-entries 128
      --zset-max-ziplist-value 64
      --hll-sparse-max-bytes 3000
      --stream-node-max-bytes 4096
      --stream-node-max-entries 100
    
    # Volume configuration - using tmpfs for maximum performance
    volumes:
      - type: tmpfs
        target: /data
        tmpfs:
          size: 4G
          mode: 0755
    
    # Resource allocation using global variables
    deploy:
      resources:
        limits:
          cpus: "${GLOBAL_CPU_LIMIT:-0}"
          memory: "${GLOBAL_MEMORY_LIMIT:-0}"
        reservations:
          cpus: "1"
          memory: "2G"
    
    # Health monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # Port mapping using global variable
    ports:
      - "${GLOBAL_REDIS_PORT:-6379}:6379"
    
    # Network configuration
    networks:
      - default

# Note: Volumes are defined in the main docker-compose.modular.yml file
