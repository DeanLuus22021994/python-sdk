# Global Docker Configuration for MCP Python SDK DevContainer
# This file contains all global variables and settings used across Docker Compose files
# Format: YAML for easy integration with Docker Compose

# Network Configuration
networks:
  default:
    name: mcp-network
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: "9000"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      driver: default
      config:
        - subnet: "172.20.0.0/16"
          gateway: "172.20.0.1"

# Volume Configurations
volumes:
  # Python Performance Caches (tmpfs for speed)
  python-cache-volume:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: "size=8G,uid=1000,gid=1000,mode=0755"
  
  python-wheels-volume:
    driver: local 
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: "size=4G,uid=1000,gid=1000,mode=0755"
  
  python-bytecode-volume:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: "size=2G,uid=1000,gid=1000,mode=0755"
  
  numba-cache-volume:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: "size=4G,uid=1000,gid=1000,mode=0755"
  
  # Persistent Storage
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${POSTGRES_DATA_PATH:-/opt/postgres-data}"

# Global Environment Variables
environment:
  # Python Optimization
  PYTHONOPTIMIZE: "2"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONHASHSEED: "0"
  PYTHONSTARTUP: "/workspaces/python-sdk/.devcontainer/config/python-startup.py"
  
  # Performance Settings
  MALLOC_CONF: "dirty_decay_ms:1000,muzzy_decay_ms:1000"
  LD_PRELOAD: "/usr/lib/x86_64-linux-gnu/libjemalloc.so.2"
  
  # GPU Configuration
  NVIDIA_VISIBLE_DEVICES: "all"
  NVIDIA_DRIVER_CAPABILITIES: "all"
  CUDA_VISIBLE_DEVICES: "all"
  
  # Cache Directories
  NUMBA_CACHE_DIR: "/opt/mcp-cache/numba"
  PYTHONPATH: "/workspaces/python-sdk/src"
  
  # Resource Limits
  TMPFS_SIZE: "32G"
  CONTAINER_SHM_SIZE: "16G"
  
  # Database Configuration
  POSTGRES_USER: "postgres"
  POSTGRES_DB: "postgres" 
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_PORT: "5432"
  POSTGRES_DATA_PATH: "/opt/postgres-data"
  
  # Redis Configuration
  REDIS_PORT: "6379"
  REDIS_MAXMEMORY: "4gb"
  
  # Network Configuration
  NETWORK_MTU: "9000"

# Resource Configurations
resources:
  app:
    # Unlimited resources - use all available
    limits:
      cpus: "0"      # 0 = unlimited
      memory: "0"    # 0 = unlimited
    reservations:
      cpus: "4"      # Minimum 4 CPUs
      memory: "8G"   # Minimum 8GB RAM
      
  postgres:
    limits:
      cpus: "0"      # Unlimited
      memory: "0"    # Unlimited
    reservations:
      cpus: "2"      # Minimum 2 CPUs
      memory: "2G"   # Minimum 2GB RAM
      
  redis:
    limits:
      cpus: "0"      # Unlimited
      memory: "0"    # Unlimited
    reservations:
      cpus: "1"      # Minimum 1 CPU
      memory: "1G"   # Minimum 1GB RAM

# Security and Performance Settings
security:
  privileged: true
  init: true
  security_opt:
    - "seccomp:unconfined"
    - "apparmor:unconfined"
  
  ulimits:
    memlock:
      soft: -1
      hard: -1
    stack:
      soft: 67108864
      hard: 67108864
    nofile:
      soft: 1048576
      hard: 1048576
  
  sysctls:
    - "net.core.somaxconn=32768"
    - "net.ipv4.tcp_max_syn_backlog=32768"
    - "net.core.netdev_max_backlog=32768"
    - "vm.swappiness=1"
    - "vm.dirty_ratio=80"
    - "vm.dirty_background_ratio=5"
    - "vm.vfs_cache_pressure=50"

# GPU Configuration
gpu:
  devices:
    - driver: nvidia
      count: all
      capabilities: [gpu, compute, utility]

# Tmpfs Configurations
tmpfs:
  app:
    - target: "/tmp"
      size: "${TMPFS_SIZE:-32G}"
      mode: "1777"
    - target: "/dev/shm"
      size: "${CONTAINER_SHM_SIZE:-16G}"
      mode: "1777"
    - target: "/var/tmp"
      size: "8G"
      mode: "1777"
  
  postgres:
    - target: "/tmp"
      size: "4G"
      mode: "1777"
    - target: "/var/run/postgresql"
      size: "1G"
      mode: "1777"
  
  redis:
    - target: "/data"
      size: "4G"
      mode: "1777"
    - target: "/tmp"
      size: "1G"
      mode: "1777"

# PostgreSQL Performance Configuration
postgres:
  config:
    shared_preload_libraries: "pg_stat_statements,pg_buffercache"
    shared_buffers: "2GB"
    effective_cache_size: "6GB"
    maintenance_work_mem: "512MB"
    checkpoint_completion_target: "0.9"
    wal_buffers: "64MB"
    default_statistics_target: "100"
    random_page_cost: "1.1"
    effective_io_concurrency: "400"
    work_mem: "128MB"
    min_wal_size: "2GB"
    max_wal_size: "8GB"
    checkpoint_timeout: "10min"
    max_connections: "200"
    max_prepared_transactions: "100"
    wal_level: "replica"
    max_wal_senders: "10"
    max_replication_slots: "10"
    hot_standby: "on"
    wal_keep_size: "1GB"
    max_worker_processes: "16"
    max_parallel_workers_per_gather: "8"
    max_parallel_workers: "16"
    max_parallel_maintenance_workers: "8"
    synchronous_commit: "off"
    fsync: "off"
    full_page_writes: "off"

# Redis Performance Configuration
redis:
  config:
    maxmemory: "4gb"
    maxmemory_policy: "allkeys-lru"
    save: ""
    appendonly: "no"
    tcp_keepalive: "60"
    tcp_backlog: "511"
    databases: "16"
    maxclients: "10000"
    timeout: "0"
    io_threads: "4"
    io_threads_do_reads: "yes"
    lazyfree_lazy_eviction: "yes"
    lazyfree_lazy_expire: "yes"
    lazyfree_lazy_server_del: "yes"
    replica_lazy_flush: "yes"
    hash_max_ziplist_entries: "512"
    hash_max_ziplist_value: "64"
    list_max_ziplist_size: "-2"
    set_max_intset_entries: "512"
    zset_max_ziplist_entries: "128"
    zset_max_ziplist_value: "64"
    hll_sparse_max_bytes: "3000"
    stream_node_max_bytes: "4096"
    stream_node_max_entries: "100"
